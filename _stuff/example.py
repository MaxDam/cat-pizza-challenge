# -*- coding: utf-8 -*-
"""YT Langchain creating and Parsing a Conversational Form.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqIaD5BYT8RcmVawIiRhgtEd_dDkNb_0
"""

#https://www.youtube.com/watch?app=desktop&si=fvCdI6V7V7WNuRxt&v=IT93On2LB5k&feature=youtu.be

!pip -q install langchain huggingface_hub openai google-search-results tiktoken cohere

import os

os.environ["OPENAI_API_KEY"] = ""

!pip show langchain

"""# Making a Conversational Form

### Setting up Conversation Filtering
"""

from langchain.chat_models import ChatOpenAI
from langchain.chains import create_tagging_chain, create_tagging_chain_pydantic
from langchain.prompts import ChatPromptTemplate

from enum import Enum
from pydantic import BaseModel, Field

llm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")

class PersonalDetails(BaseModel):
    first_name: str = Field(
        ...,
        description="This is the first name of the user.",
    )
    last_name: str = Field(
        ...,
        description="This is the last name or surname of the user.",
    )
    full_name: str = Field(
        ...,
        description="Is the full name of the user ",
    )
    city: str = Field(
        ...,
        description="The name of the city where someone lives",
    )
    email: str = Field(
        ...,
        description="an email address that the person associates as theirs",
    )
    language: str = Field(
        ..., enum=["spanish", "english", "french", "german", "italian"]
    )

chain = create_tagging_chain_pydantic(PersonalDetails, llm)

test_string = "Hi my name is David Jones and I live in Melbourne Australia."

res = chain.run(test_string)

res

test_string_02 = "Hi my name is Chatree Kongsuwan  and I live in Bangkok. you can contact me at chatree@gmail.com"

res = chain.run(test_string_02)
res

res.email

test_string_03 = "My email is chatree@gmail.com but my brother's is dave@gmail.com"

res = chain.run(test_string_03)
res

"""## Doing the full thing in a natural conversation"""

user_123_personal_details = PersonalDetails(first_name="",
                                last_name="",
                                full_name="",
                                city="",
                                email="",
                                language="")

user_123_personal_details

#
def check_what_is_empty(user_peronal_details):
    ask_for = []
    # Check if fields are empty
    for field, value in user_peronal_details.dict().items():
        if value in [None, "", 0]:  # You can add other 'empty' conditions as per your requirements
            print(f"Field '{field}' is empty.")
            ask_for.append(f'{field}')
    return ask_for

ask_for = check_what_is_empty(user_123_personal_details)
ask_for

## checking the response and adding it
def add_non_empty_details(current_details: PersonalDetails, new_details: PersonalDetails):
    non_empty_details = {k: v for k, v in new_details.dict().items() if v not in [None, ""]}
    updated_details = current_details.copy(update=non_empty_details)
    return updated_details

user_123_personal_details = add_non_empty_details(user_123_personal_details,res)

user_123_personal_details

res = chain.run(test_string)
user_123_personal_details = add_non_empty_details(user_123_personal_details,res)

user_123_personal_details

ask_for = check_what_is_empty(user_123_personal_details)
ask_for

if not ask_for:
    print("Thank you we have all the details")

"""## Putting it together with a LLMChain as well

"""

from langchain.chains import TransformChain, LLMChain, SimpleSequentialChain
from langchain.prompts import PromptTemplate, ChatPromptTemplate

user_123_personal_details = PersonalDetails(first_name="",
                                last_name="",
                                full_name="",
                                city="",
                                email="",
                                language="")

user_123_personal_details

llm = ChatOpenAI(temperature=0)

def ask_for_info(ask_for = ['name','age', 'location']):

    # prompt template 1
    first_prompt = ChatPromptTemplate.from_template(
        "Below is are some things to ask the user for in a coversation way. you should only ask one question at a time even if you don't get all the info \
        don't ask as a list! Don't greet the user! Don't say Hi.Explain you need to get some info. If the ask_for list is empty then thank them and ask how you can help them \n\n \
        ### ask_for list: {ask_for}"
    )

    # info_gathering_chain
    info_gathering_chain = LLMChain(llm=llm, prompt=first_prompt)
    ai_chat = info_gathering_chain.run(ask_for=ask_for)
    return ai_chat

def filter_response(text_input, user_details ):
    chain = create_tagging_chain_pydantic(PersonalDetails, llm)
    res = chain.run(text_input)
    # add filtered info to the
    user_details = add_non_empty_details(user_details,res)
    ask_for = check_what_is_empty(user_details)
    return user_details, ask_for

ask_for_info()

text_input ="ok My name is Sam"

user_details, ask_for = filter_response(text_input, user_123_personal_details)

if ask_for:
    ai_response = ask_for_info(ask_for)
    print(ai_response)
else:
    print('Everything gathered move to next phase')

text_input ="My name is Witteveen is Sam Witteveen"
user_details, ask_for = filter_response(text_input, user_details)

if ask_for:
    ai_response = ask_for_info(ask_for)
    print(ai_response)
else:
    print('Everything gathered move to next phase')

text_input ="Sure I mostly live in Singapore"
user_details, ask_for = filter_response(text_input, user_details)

if ask_for:
    ai_response = ask_for_info(ask_for)
    print(ai_response)
else:
    print('Everything gathered move to next phase')

text_input ="sam@reddragon.ai"
user_details, ask_for = filter_response(text_input, user_details)

if ask_for:
    ai_response = ask_for_info(ask_for)
    print(ai_response)
else:
    print('Everything gathered move to next phase')

user_details

user_details.city

